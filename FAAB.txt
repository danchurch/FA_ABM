## txtbook for first attempts at a FA ABM:

## the goal for the day is to make some trees

## Environment, for python3:

from mesa import Agent, Model
from mesa.time import RandomActivation
import matplotlib.pyplot as plt

class tree (Agent):
    def __init__(self, unique_id, model, leaffall = 1, leafdist = 1, woodfall = 1, wooddist = 1):
        super().__init__(unique_id, model)
        self.leaffall = leaffall
        self.leafdist = leafdist
        self.woodfall = woodfall
        self.wooddist = wooddist
    def step(self):
        print(self.unique_id) #pass 

class forest (Model): 
    def __init__ (self, ts): 
        self.ntrees = ts 
        self.schedule = RandomActivation(self) 
        for i in range(self.ntrees): 
            a = tree(i, self)
            self.schedule.add(a) 
    def step(self): self.schedule.step() 

## test run:
losced = forest(7)
losced.step() ## works. 


###############################################

## can we put them in a landscape?

from mesa import Agent, Model
from mesa.time import RandomActivation
import random
import numpy as np
import matplotlib.pyplot as plt
from mesa.space import ContinuousSpace
from mesa.time import RandomActivation

###### model #######
class Forest (Model): 
    def __init__ (self, ts, width = 10, height = 10):
        self.ntrees = ts 
        self.schedule = RandomActivation(self) 
        self.space = ContinuousSpace(width, height, True)
        for i in range(self.ntrees): 
            x = random.random() * self.space.x_max
            y = random.random() * self.space.y_max 
            pos = (x, y)
            tree = Tree(i, self, pos)
            self.schedule.add(tree) 
    def step(self): self.schedule.step() 

##### trees ######
class Tree (Agent):
    def __init__(self, unique_id, model, pos, leaffall = 1, leafdist = 1, woodfall = 1, wooddist = 1):
        super().__init__(unique_id, model)
        self.leaffall = leaffall
        self.leafdist = leafdist
        self.woodfall = woodfall
        self.wooddist = wooddist
        self.pos = pos
    def step(self):
        print(self.unique_id, self.pos) 
        #pass 

## test
losced = Forest(5)
losced.step()

## okay, seems to work. How do we visualize this?

#############################################

from mesa.visualization.ModularVisualization import ModularServer
from mesa.visualization.modules import CanvasGrid

def agent_portrayal(agent):
    portrayal = {"Shape": "circle", 
        "Color": "red", 
        "Filled": "true",
        "Layer": 0,
        "r": 0.5 
        }
    return protrayal

grid = CanvasGrid(agent_portrayal, 10, 10, 500, 500)

server = ModularServer(Forest, 
                        [grid],
                        "Testing Trees",
                        100, 10, 10
                        )

server.launch()



boid_canvas = SimpleCanvas(boid_draw, 500, 500)
server = ModularServer(BoidModel, [boid_canvas], "Boids",
100, 100, 100, 5, 10, 2)
